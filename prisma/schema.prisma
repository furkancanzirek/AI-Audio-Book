generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL") // bypasses connection pooling
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  updatedAt          DateTime             @updatedAt @map(name: "updated_at")
  subscriptions      Subscription[]
  UserProductHistory UserProductHistory[]

  @@map(name: "users")
}

model SubscriptionPackage {
  id            String         @id @default(cuid())
  name          String
  price         Float
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  products      Product[] // Ürünler burada bulunacak
  subscriptions Subscription[]

  @@map(name: "subscription_packages")
}

model Subscription {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now()) @map(name: "created_at")
  updatedAt DateTime            @updatedAt @map(name: "updated_at")
  userId    String              @map(name: "user_id")
  user      User                @relation(fields: [userId], references: [id])
  package   SubscriptionPackage @relation(fields: [packageId], references: [id])
  packageId String              @map(name: "package_id")
  products  Product[]

  @@map(name: "subscriptions")
}

model Product {
  id                    String               @id @default(cuid())
  name                  String
  createdAt             DateTime             @default(now()) @map(name: "created_at")
  updatedAt             DateTime             @updatedAt @map(name: "updated_at")
  UserProductHistory    UserProductHistory[]
  subscriptions         Subscription[]
  SubscriptionPackage   SubscriptionPackage? @relation(fields: [subscriptionPackageId], references: [id])
  subscriptionPackageId String?
  audioBookId           String?

  @@map(name: "products")
}

model UserProductHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  userId    String   @map(name: "user_id")
  productId String   @map(name: "product_id")
  time      Int      @map(name: "time")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map(name: "user_product_history")
}

model AudioBook {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  name      String
  author    String
  narrator  String
  duration  Int
  coverUrl  String
  stars     Int     @default(0)
  rating   Float   @default(0)
  tracks    Track[]

  @@map(name: "audiobooks")
}

model Track {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  duration    Int
  trackNumber Int
  audioUrl    String
  book        AudioBook @relation(fields: [bookId], references: [id])
  bookId      String    @map(name: "book_id")
  parts       Part[]

  @@map(name: "tracks")
}

model Part {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  title     String
  duration  Int
  part      Int
  startTime Int
  endTime   Int
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String   @map(name: "track_id")

  @@map(name: "parts")
}
